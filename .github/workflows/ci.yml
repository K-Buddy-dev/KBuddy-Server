name: KBuddy Server CI/CD

on:
  push:
    branches:
      - main
    tags:
      - "v*.*.*" # 버전 태그를 달아 배포할 때 사용할 태그 필드

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4 # 코드 체크아웃
      
      - name: Set up JDK 17 # JDK 17 설정
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Create .env file # 환경 변수 설정
        run: |
          echo "DB_USER=${{ secrets.DB_USER }}" > .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
          echo "EMAIL_USERNAME=${{ secrets.EMAIL_USERNAME }}" >> .env
          echo "EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}" >> .env

      - name: Grant execute permission for gradlew # gradlew 실행 권한 부여
        run: chmod +x gradlew

      - name: Test with Gradle # Gradle로 테스트 실행
        run: ./gradlew --info test
        
      - name: Cleanup Gradle Cache
        if: ${{ always() }}
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties

  build-and-push:
    name: Build and Push to ECR # ECR에 빌드하고 푸시
    needs: test # test 작업이 성공해야 build-and-push 작업 실행
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) # push 이벤트이고 메인 브랜치 또는 태그가 있는 경우 실행
    runs-on: ubuntu-latest 
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # AWS 액세스 키 ID
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # AWS 시크릿 액세스 키
          aws-region: ${{ secrets.AWS_REGION }} # AWS 리전

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create .env file
        run: |
          echo "DB_USER=${{ secrets.DB_USER }}" > .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
          echo "EMAIL_USERNAME=${{ secrets.EMAIL_USERNAME }}" >> .env
          echo "EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}" >> .env

      - name: Build and push Docker image # Docker 이미지 빌드하고 푸시
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: kbuddy-server
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . # Docker 이미지 빌드
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG # Docker 이미지 푸시
          if [[ ${{ github.ref }} == refs/tags/* ]]; then # 태그가 있는 경우
            VERSION=${GITHUB_REF#refs/tags/} # 태그 버전 추출
            docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION # 태그 이미지 태그 붙임
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION # 태그 이미지 푸시
          fi
          if [[ ${{ github.ref }} == refs/heads/main ]]; then # 메인 브랜치인 경우
            docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest # 최신 이미지 태그 붙임
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest # 최신 이미지 푸시
          fi

  deploy:
    name: Deploy to ECS # ECS에 배포
    needs: build-and-push # build-and-push 작업이 성공해야 deploy 작업 실행
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) # push 이벤트이고 메인 브랜치 또는 태그가 있는 경우 실행
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials # AWS 자격 증명 설정
        uses: aws-actions/configure-aws-credentials@v4 
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # AWS 액세스 키 ID
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # AWS 시크릿 액세스 키
          aws-region: ${{ secrets.AWS_REGION }} # AWS 리전

      - name: Download task definition # 작업 정의 다운로드
        run: |
          aws ecs describe-task-definition --task-definition kbuddy-server --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition # Amazon ECS 작업 정의에 새 이미지 ID 채우기
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json 
          container-name: kbuddy-server
          image: ${{ steps.login-ecr.outputs.registry }}/kbuddy-server:${{ github.sha }} # 새 이미지 ID 채우기

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }} # 작업 정의 업데이트
          service: kbuddy-server
          cluster: kbuddy-cluster
          wait-for-service-stability: true

  notify-slack:
    name: Notify Slack # Slack에 알림 보내기
    needs: deploy # deploy 작업이 성공해야 notify-slack 작업 실행
    runs-on: ubuntu-latest
    if: always() # 항상 실행
    steps:
      - name: Post to Slack # Slack에 알림 보내기
        uses: slackapi/slack-github-action@v1.26.0 # Slack 액션 사용
        with:
          channel-id: 'notification'
          slack-message: | # Slack 메시지 설정
            Deployment Status: ${{ needs.deploy.result }} # 배포 상태
            Commit: ${{ github.event.head_commit.message }} # 커밋 메시지 
            Author: ${{ github.event.head_commit.author.name }} # 커밋 작성자
            URL: ${{ github.event.head_commit.url }} # 커밋 URL
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }} # Slack 봇 토큰
